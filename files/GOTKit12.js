import{f as e,I as a,B as t,g as s,s as r,h as n,l as o,j as c,k as d,m as l,n as u,H as i,o as f}from"./lucifer.v666.js";class p extends t{constructor({callbackSelector:e,cause:a,data:t,extraData:r,sender:n,urls:o}){super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],a.metaMessages?.length?"":[],"Offchain Gateway Call:",o&&["  Gateway URL(s):",...o.map(e=>`    ${s(e)}`)],`  Sender: ${n}`,`  Data: ${t}`,`  Callback selector: ${e}`,`  Extra data: ${r}`].flat(),name:"OffchainLookupError"})}}class h extends t{constructor({result:e,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${s(a)}`,`Response: ${r(e)}`],name:"OffchainLookupResponseMalformedError"})}}class m extends t{constructor({sender:e,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${e}`],name:"OffchainLookupSenderMismatchError"})}}const w="0x556f1830",y={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function b(t,{blockNumber:s,blockTag:r,data:i,to:f}){const{args:h}=n({data:i,abi:[y]}),[w,b,k,x,O]=h,{ccipRead:L}=t,T=L&&"function"==typeof L?.request?L.request:g;try{if(!function(t,s){if(!e(t,{strict:!1}))throw new a({address:t});if(!e(s,{strict:!1}))throw new a({address:s});return t.toLowerCase()===s.toLowerCase()}(f,w))throw new m({sender:w,to:f});const n=b.includes(o)?await c({data:k,ccipRequest:T}):await T({data:k,sender:w,urls:b}),{data:i}=await d(t,{blockNumber:s,blockTag:r,data:l([x,u([{type:"bytes"},{type:"bytes"}],[n,O])]),to:f});return i}catch($){throw new p({callbackSelector:x,cause:$,data:i,extraData:O,sender:w,urls:b})}}async function g({data:e,sender:a,urls:t}){let s=new Error("An unknown error occurred.");for(let o=0;o<t.length;o++){const c=t[o],d=c.includes("{data}")?"GET":"POST",l="POST"===d?{data:e,sender:a}:void 0,u="POST"===d?{"Content-Type":"application/json"}:{};try{const t=await fetch(c.replace("{sender}",a.toLowerCase()).replace("{data}",e),{body:JSON.stringify(l),headers:u,method:d});let n;if(n=t.headers.get("Content-Type")?.startsWith("application/json")?(await t.json()).data:await t.text(),!t.ok){s=new i({body:l,details:n?.error?r(n.error):t.statusText,headers:t.headers,status:t.status,url:c});continue}if(!f(n)){s=new h({result:n,url:c});continue}return n}catch(n){s=new i({body:l,details:n.message,url:c})}}throw s}export{g as ccipRequest,b as offchainLookup,y as offchainLookupAbiItem,w as offchainLookupSignature};
